# Location: SINGULARITYHEALTH/docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      # These are used by Postgres image to initialize the database
      - POSTGRES_DB=${DB_NAME:-singularity_db}
      - POSTGRES_USER=${DB_USER:-singularity_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgress} # Ensure this matches backend's DB_PASSWORD
    ports:
      - "${DB_PORT_HOST:-5432}:${DB_PORT_CONTAINER:-5432}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-singularity_user} -d ${DB_NAME:-singularity_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      # Variables directly used by your settings.py via django-environ
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-h7l9y2=x3$$ol6eig9hxfz8v+g0@p2y=i-z#@2=_5#ao27p#8bn} # $$ for literal $
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend,frontend} # Comma-separated string

      # Database variables that settings.py expects
      - DB_NAME=${DB_NAME:-singularity_db}
      - DB_USER=${DB_USER:-singularity_user}
      - DB_PASSWORD=${DB_PASSWORD:-postgress}    # This is read by settings.py
      - DB_HOST=db                              # CRITICAL: This tells Django to connect to the 'db' service
      - DB_PORT=${DB_PORT_CONTAINER:-5432}      # The port Postgres is listening on inside Docker

      # For CORS. To use this env var, settings.py needs to be updated (see Step 4)
      # Otherwise, Django uses the hardcoded list or CORS_ALLOW_ALL_ORIGINS=True
      - CORS_ALLOWED_ORIGINS_ENV=${CORS_ALLOWED_ORIGINS_ENV:-http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000} # Comma-separated

      # For 'createsuperuser --noinput' in entrypoint.sh
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-admin123}

      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_BACKEND_URL=http://localhost:8000/graphql/
      # - CHOKIDAR_USEPOLLING=true # Uncomment if file watching/hot-reloading has issues
    depends_on:
      - backend
    networks:
      - app_network

volumes:
  postgres_data:
  static_volume:

networks:
  app_network:
    driver: bridge